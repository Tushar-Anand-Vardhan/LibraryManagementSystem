<!DOCTYPE html>
<html>
<head>
<title>Tushar</title>
</head>
<body>

<h1>My First Heading</h1>
<h1>My Second Heading</h1>
<p>#include<stdio.h><br/>
#include<stdlib.h><br/>
struct node<br/>
{<br/>
    int data;<br/>
    struct node* left;<br/>
    struct node* right;<br/>
};<br/>
struct node *root=NULL;<br/>
struct node* getnewn(int data)<br/>
{<br/>
    struct node* newn=(struct node*)malloc(sizeof(struct node));<br/>
    newn->data=data;<br/>
    newn->left=newn->right=NULL;<br/>
    return newn;<br/>
}<br/>
struct node* insert(struct node* root,int data)<br/>
{<br/>
    if(root==NULL)<br/>
    {<br/>
        root=getnewn(data);<br/>
    }<br/>
    else if(root->data>data)<br/>
    {<br/>
        root->left=insert(root->left,data);<br/>
    }<br/>
    else if(root->data<data)<br/>
    {<br/>
        root->right=insert(root->right,data);<br/>
    }<br/>
    return root;<br/>
}<br/>
int search(struct node* root,int data)<br/>
{<br/>
    if(root==NULL) return 2;<br/>
    if(root->data==data)return 1;<br/>
    else if(data<root->data)<br/>
        search(root->left,data);<br/>
    else if(data>root->data)<br/>
        search(root->right,data);<br/>
}<br/>
struct node* findmin(struct node* root)<br/>
{<br/>
    while(root->left!=NULL)<br/>
        root=root->left;<br/>
    return root;<br/>
}<br/>
struct node* del(struct node* root,int data)<br/>
{<br/>
    if(root==NULL)<br/>
        return root;<br/>
    else if(root->data>data)<br/>
    {<br/>
        root->left=del(root->left,data);<br/>
    }<br/>
    else if(root->data<data)<br/>
    {<br/>
        root->right=del(root->right,data);<br/>
    }<br/>
    else //node found. Time to delete.<br/>
        //CASE1 no sub tree.<br/>
        if(root->left==NULL && root->right==NULL)<br/>
    {<br/>
        free(root);<br/>
        root=NULL;<br/>
        return root;<br/>
    }<br/>
        //CASE2 one sub tree.<br/>
        else if(root->left==NULL)<br/>
        {<br/>
            struct node * temp=root;<br/>
            root=root->right;<br/>
            free(temp);<br/>
            return root;<br/>
        }<br/>
        else if(root->right==NULL)<br/>
        {<br/>
            struct node * temp=root;<br/>
            root=root->left;<br/>
            free(temp);<br/>
            return root;<br/>
        }//case3 two sub trees<br/>
        else<br/>
        {<br/>
            struct node* temp=findmin(root->right);<br/>
            root->data=temp->data;<br/>
            root->right=del(root->right,temp->data);<br/>
            return root;<br/>
        }<br/>
}<br/>

void inorder(struct node *root)<br/>
{<br/>
    if(root==NULL)return;<br/>
    inorder(root->left);<br/>
    printf("%d - ",root->data);<br/>
    inorder(root->right);<br/>
}<br/>
void preorder(struct node *root)<br/>
{<br/>
    if(root==NULL)return;<br/>
    printf("%d - ",root->data);<br/>
    preorder(root->left);<br/>
    preorder(root->right);<br/>
}<br/>
void postorder(struct node *root)<br/>
{<br/>
    if(root==NULL)return;<br/>
    postorder(root->left);<br/>
    postorder(root->right);<br/>
    printf("%d - ",root->data);<br/>
}<br/>

int main()
{
    root=insert(root,15);
    insert(root,10);
    insert(root,20);
    insert(root,8);
    insert(root,12);
    insert(root,17);
    insert(root,25);
    inorder(root);
    if(search(root,2)==1)
        printf("Found");
    else
        printf("Not Found");
    del(root,20);
    inorder(root);
    preorder(root);
    postorder(root);
    return 0;
}
</p>
<p1>My Second Paragraph</p1>
<a href="https://www.w3schools.com">This is a link</a>
<img src="pic1.jpg" alt="Hello" width="144" height="142">
<button>click me</button>
<ol>
  <li>Coffee</li>
  <li>Tea</li>
  <li>Milk</li>
</ol>
</body>
</html>
